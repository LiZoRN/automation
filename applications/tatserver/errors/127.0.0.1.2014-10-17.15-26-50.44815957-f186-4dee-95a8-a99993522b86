(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> int() argument must be a string or a number, not 'list'"
p3
sS'layer'
p4
S'D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\ndef getpersom(value):\n    return\n\ndef make_plan():\n    a = ["b","aaa","ccc"]\n\n    pj_dict = {"Alto5":{"v3H20":{"ZZ":"x3h2zz00bg00","ZZ":"x3h21230bg00"}},"Alto4":{"vasdH20":{"ZZ":"x3h2zz00bg00","ZZ":"x3h21230bg00"}}}\n\n\n    project_form = FORM(TABLE(\n        TR(\'project:\', INPUT(_type=\'text\', _name=\'name\',requires=IS_NOT_EMPTY())),\n        TR(\'Your email:\', INPUT(_type=\'text\', _name=\'email\',requires=IS_EMAIL())),\n        TR(\'Admin\', INPUT(_type=\'checkbox\', _name=\'admin\')),\n        TR(\'persos\', SELECT(a, _name=\'sure\',\n                            onChange="getpersom(this.value)",align=\'top\',requires=IS_IN_SET([\'yes\', \'no\']))),\n        TR(\'persos_m\', SELECT(a, _name=\'persos_m\',hidden=True)),\n    ))\n    plan_form = FORM(TABLE(\n        TR(\'project:\', INPUT(_type=\'text\', _name=\'name\',requires=IS_NOT_EMPTY())),\n        TR(\'Test Type:\', INPUT(_type=\'text\', _name=\'test_type\',requires=IS_NOT_EMPTY())),\n        TR(\'TestScript Branch:\', INPUT(_type=\'text\', _name=\'scrip_branch\',requires=IS_NOT_EMPTY())),\n        TR(\'TestScript Tag:\', INPUT(_type=\'text\', _name=\'scrip_tag\',requires=IS_NOT_EMPTY())),\n        TR(\'tool:\', INPUT(_type=\'text\', _name=\'tool\',requires=IS_EMAIL())),\n        TR(\'begin time\', INPUT(__type=\'date\', _name=\'begin_time\',requires=IS_TIME())),\n        TR(\'client_name\', SELECT(a, _name=\'sure\',\n                            onChange="getpersom(this.value)",align=\'top\',requires=IS_IN_SET([\'yes\', \'no\']))),\n        TR(\'\', INPUT(_type=\'submit\', _value=\'SUBMIT\')),\n    ))\n    plan_form1 = SQLFORM(db.test_plan)\n    if plan_form1.process().accepted:\n        response.flash = \'record inserted\'\n    return dict(project_form = project_form,plan_form = plan_form1,pj_dict = pj_dict)\n\ndef get_report():\n    return "success"\n\ndef display():\n    form = SQLFORM(db.test_plan)\n    return dict(form = form)\n\ndef test():\n    import xml\n    return dict(form = form)\n\ndef show_testplan():\n    return dict()\n\ndef new_client():\n    form = SQLFORM(db.client)\n    if form.accepts(request.post_vars,session):\n        session.flash = \'client created ok\'\n        redirect(URL(\'show_clients\'))\n    Message ="New Client"\n    return dict(form=form,message=Message)\n\ndef delete_client():\n    form = SQLFORM(db.client)\n    if form.accepts(request.post_vars,session):\n        session.flash = \'client created ok\'\n        redirect(URL(\'show_clients\'))\n    Message ="New Client"\n    return dict(form=form,message=Message)\n\ndef show_client_status():\n    plans = []\n    testStatus = {"client_name":"lz","testor_name":"lz","status":"running","plan_list":["111","222222"]}\n    list_client = db(db.client).select()\n    for client in list_client:\n        #RPC Function\n        if testStatus["client_name"]==client.name:\n            # myquery = (db.test_client.client_name == testStatus["client_name"])\n            # myset = db(myquery)\n            # if None != myset:\n            #     myset.update(status=testStatus["status"])\n            #     myset.delete()\n            # else:\n            #     pass\n            plans.append(testStatus["plan_list"])\n            db.test_client.update_or_insert(client_name="lz",testor_name="l1z",status="running",plan_list=plans)\n    return dict(form = SQLFORM(db.test_client), list_client = db(db.test_client).select())\n\ndef show_clients():\n    list_client = db(db.client).select()\n    return dict(list_client =list_client )\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(show_client_status)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\project\\web\\web2py\\gluon\\restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py", line 157, in <module>\n  File "D:\\project\\web\\web2py\\gluon\\globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py", line 101, in show_client_status\n    db.test_client.update_or_insert(client_name="lz",testor_name="l1z",status="running",plan_list=plans)\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 9376, in update_or_insert\n    record = self(**values)\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 9136, in __call__\n    return self._db(query).select(limitby=(0, 1), for_update=for_update, orderby=orderby, orderby_on_limitby=False).first()\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 10749, in select\n    return adapter.select(self.query, fields, attributes)\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 2472, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 1868, in select\n    sql = self._select(query, fields, attributes)\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 1767, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 1382, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 1544, in expand\n    out = op(first, second, **optional_args)\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 1440, in EQ\n    self.expand(second, first.type))\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 1555, in expand\n    return str(self.represent(expression, field_type))\n  File "D:\\project\\web\\web2py\\gluon\\dal.py", line 1988, in represent\n    obj = map(int, [o for o in obj if o != \'\'])\nTypeError: int() argument must be a string or a number, not \'list\'\n'
p11
s.