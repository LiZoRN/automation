(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'name'"
p3
sS'layer'
p4
S'D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef new_client():\n    form = SQLFORM(db.client)\n    if form.accepts(request.post_vars,session):\n        session.flash = \'client created ok\'\n        redirect(URL(\'show_clients\'))\n    Message ="New Client"\n    return dict(form=form,message=Message)\n\ndef delete_client():\n    """delete an existing client"""\n    row = db.client[request.args(0)]\n    form = SQLFORM(db.client, row, deletable=True,showid=False)\n    if form.process().accepted:\n        response.flash = \'record delete\'\n        redirect(URL(\'show_clients\'))\n    return dict(form=form)\n\ndef edit_client():\n     """edit an existing client"""\n     this_page = db.client(request.args(0,cast=int)) or redirect(URL(\'index\'))\n     form = SQLFORM(db.client, this_page, deletable=True,showid=False).process(\n         next = URL(\'show_clients\',args=request.args))\n     return dict(form=form)\n\ndef show_clients():\n    list_client = db(db.client).select()\n    return dict(list_client =list_client)\n\ndef show_client():\n    client = db.client(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    return dict(client =client)\n\ndef show_client_status():\n    plans = []\n    testStatus = {"client_name":"lz","testor_name":"lz","status":"running","plan_list":["111","222222"]}\n    list_client = db(db.client).select()\n    for client in list_client:\n        #RPC Function\n        if testStatus["client_name"]==client.name:\n            # myquery = (db.test_client.client_name == testStatus["client_name"])\n            # myset = db(myquery)\n            # if None != myset:\n            #     myset.update(status=testStatus["status"])\n            #     myset.delete()\n            # else:\n            #     pass\n            plans.append(testStatus["plan_list"])\n            db.test_client.update_or_insert(client_name="lz",testor_name="l1z",status="running",plan_list="111,222222")\n    return dict(form = SQLFORM(db.test_client), list_client = db(db.test_client).select())\n\n\n\ndef new_device():\n    form = SQLFORM(db.device)\n    if form.accepts(request.post_vars,session):\n        session.flash = \'client created ok\'\n        redirect(URL(\'show_clients\'))\n    Message ="New Client"\n    return dict(form=form,message=Message)\n\ndef edit_device():\n    """delete an existing client"""\n    row = db.device[request.args(0,cast=int)]\n    form = SQLFORM(db.device, row, deletable=True,showid=False,readonly=False)\n    if form.process().accepted:\n        response.flash = \'record delete\'\n        redirect(URL(\'show_all_devices\'))\n    return dict(form=form)\n\ndef flush_all_devices():\n    list_client = db(db.client).select()\n    devices = {}\n    for client in list_client:\n        try:\n            for device,detail in db_rpc.show_device(client.url).items():\n                device_id = device+"_"+detail["product"]\n                # raw = db(db.device.name==device_id).select().first()\n                # if None != raw:\n                #     pass\n                db.device.update_or_insert(name = device_id,display_id = detail["display_id"],\n                                           build_date = detail["build_date"],product = detail["product"],\n                                           region = detail["region"],hardware = detail["hardware"],\n                                           build_type = detail["build_type"],host_name = client.id)\n        except:\n            continue\n    redirect(URL(\'show_all_devices\'))\n    Message ="Flush all devices Success!"\n    return dict(message=Message)\n\ndef show_all_devices():\n    list_devices = db(db.device).select()\n    return dict(list_device =list_devices)\n\ndef show_device_status():\n    list_devices = db(db.device_status).select()\n    return dict(list_devices =list_devices)\n\ndef show_device():\n    list_device = db(db.device.host_name==request.args[0]).select()\n    if None == list_device:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("index")))\n    return dict(list_device = list_device)\n\ndef device_cfg():\n    return dict(device = db.device[request.args(0,cast=int)])\n\n\ndef del_device():\n\n    return dict()\n\n\n\ndef new_plan():\n    # a = ["b","aaa","ccc"]\n    #\n    # pj_dict = {"Alto5":{"v3H20":{"ZZ":"x3h2zz00bg00","ZZ":"x3h21230bg00"}},"Alto4":{"vasdH20":{"ZZ":"x3h2zz00bg00","ZZ":"x3h21230bg00"}}}\n    #\n    #\n    # project_form = FORM(TABLE(\n    #     TR(\'project:\', INPUT(_type=\'text\', _name=\'name\',requires=IS_NOT_EMPTY())),\n    #     TR(\'Your email:\', INPUT(_type=\'text\', _name=\'email\',requires=IS_EMAIL())),\n    #     TR(\'Admin\', INPUT(_type=\'checkbox\', _name=\'admin\')),\n    #     TR(\'persos\', SELECT(a, _name=\'sure\',\n    #                         onChange="getpersom(this.value)",align=\'top\',requires=IS_IN_SET([\'yes\', \'no\']))),\n    #     TR(\'persos_m\', SELECT(a, _name=\'persos_m\',hidden=True)),\n    # ))\n    # plan_form = FORM(TABLE(\n    #     TR(\'project:\', INPUT(_type=\'text\', _name=\'name\',requires=IS_NOT_EMPTY())),\n    #     TR(\'Test Type:\', INPUT(_type=\'text\', _name=\'test_type\',requires=IS_NOT_EMPTY())),\n    #     TR(\'TestScript Branch:\', INPUT(_type=\'text\', _name=\'scrip_branch\',requires=IS_NOT_EMPTY())),\n    #     TR(\'TestScript Tag:\', INPUT(_type=\'text\', _name=\'scrip_tag\',requires=IS_NOT_EMPTY())),\n    #     TR(\'tool:\', INPUT(_type=\'text\', _name=\'tool\',requires=IS_EMAIL())),\n    #     TR(\'begin time\', INPUT(__type=\'date\', _name=\'begin_time\',requires=IS_TIME())),\n    #     TR(\'client_name\', SELECT(a, _name=\'sure\',\n    #                         onChange="getpersom(this.value)",align=\'top\',requires=IS_IN_SET([\'yes\', \'no\']))),\n    #     TR(\'\', INPUT(_type=\'submit\', _value=\'SUBMIT\')),\n    # ))\n    # db.tool.update_or_insert(tool_version = 1.0)\n    # plan_form1 = SQLFORM(db.test_plan)\n    # if plan_form1.process().accepted:\n    #     response.flash = \'record inserted\'\n    # return dict(project_form = project_form,plan_form = plan_form1,pj_dict = pj_dict)\n    db.tool.update_or_insert(tool_version = 1.0)\n    plan_form = SQLFORM(db.test_plan,fields=[\'plan_name\', \'TestScript_Branch\',\'Tool\', \'test_devices\',"begin_time"])\n    if plan_form.process().accepted:\n        dbfile.gen_plan(db.test_plan(plan_name = request.vars.plan_name))\n        for d in plan_form.vars.test_devices:\n            device = db(db.device.id==d).select().first()\n            url = device.host_name.url\n        response.flash = \'record inserted\'\n        redirect(URL(\'show_plan\'))\n    return dict(plan_form = plan_form)\n\nimport time\ndef start_plan():\n    """delete an existing client"""\n    devices = []\n    row = db.test_plan[request.args(0,cast=int)]\n    if None == row:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))\n    for id in row.test_devices:\n        devices.append(db.device[id].name)\n    row.update_record(status = "Running",display_devices = devices,begin_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))\n    message = "Test Plan Start"\n    redirect(URL(\'show_plan\'))\n    return dict(message=message)\n\ndef stop_plan():\n    """delete an existing client"""\n    row = db.test_plan[request.args(0,cast=int)]\n    if None == row:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))\n    if row.status != "Running":\n        message = "Test Plan IsStoped"\n        redirect(URL(\'show_plan\'))\n    row.update_record(status = "Stop")\n    message = "Test Plan Stop"\n    redirect(URL(\'show_plan\'))\n    return dict(message=message)\n\ndef edit_plan():\n    """delete an existing client"""\n    devices = []\n    row = db.test_plan[request.args(0,cast=int)]\n    form = SQLFORM(db.test_plan, row, deletable=True,showid=False,readonly=False,fields=[\'plan_name\', \'TestScript_Branch\',\'Tool\', \'test_devices\',"begin_time"])\n    if form.process().accepted:\n        for id in row.test_devices:\n            devices.append(db.device[id].name)\n        row.update_record(display_devices = devices)\n        response.flash = \'record delete\'\n        redirect(URL(\'show_plan\'))\n    return dict(form=form)\n\ndef get_report():\n    return "success"\n\ndef display():\n    form = SQLFORM(db.test_plan)\n    return dict(form = form)\n\ndef show_plan():\n    return dict(list_plan= db(db.test_plan).select())\n\ndef show_all_plan():\n    return dict(list_plan= db(db.test_plan).select())\n\ndef show_all_report():\n    from applications.TATServer.modules.testdata import xml2dict\n    report = {}\n    list_client = db(db.client).select()\n    for client in list_client:\n        report[client.name] = {}\n        try:\n            for device,test_data in db_rpc.show_all_report(client.url).items():\n                report[client.name].update({device:xml2dict(test_data)})\n        except:\n            continue\n    return dict(list_client =list_client ,report = report)\n\ndef show_report_bak():\n    list_device = []\n    report = {}\n    data = []\n    from testdata import TestData,time_2_second,second_2_time\n    import codecs\n    for id in request.args:\n        plan = db.test_plan[id]\n        for device_id in plan.test_devices:\n            devices = db.device[device_id]\n                # db(db.device.id==device_id).select().first()\n            list_device.append(devices)\n    def _get_report(list_device):\n        url = list_device[0].host_name.url\n        for device,test_data in db_rpc.show_all_report(url).items():\n            report[device] = {}\n            total_runtime = 0\n            cases = TestData(test_data).parse_data()\n            for case,value in cases.items():\n                total_runtime += time_2_second(value["runtime"])\n            report[device]["status"]=cases\n            report[device]["runtime"]= second_2_time(total_runtime)\n            report[device]["sw"] = db(db.device.name==device).select().first().build_date\n        list_device = filter(lambda x:list_device[0].host_name!=x.host_name, list_device)\n        if list_device!=[]:\n            _get_report(list_device)\n    _get_report(list_device)\n    return dict(list_status =report,plan_name = plan)\n\ndef show_report11():\n    list_device = []\n    report = {}\n    data = []\n    from testdata import TestData,time_2_second,second_2_time\n    import codecs\n    for id in request.args:\n        plan = db.test_plan[id]\n        for device_id in plan.test_devices:\n            devices = db(db.device.id==device_id).select().first()\n            # devices =  db.client(id)\n            url = devices.host_name.url\n            for device,test_data in db_rpc.show_all_report(url).items():\n                if (device == devices.name):\n                    report[devices.name] = {}\n                    total_runtime = 0\n                    cases = TestData(test_data).parse_data()\n                    for case,value in cases.items():\n                        total_runtime += time_2_second(value["runtime"])\n                    report[device]["status"]=cases\n                    report[device]["runtime"]= second_2_time(total_runtime)\n                    report[device]["sw"] = devices.build_date\n                    f = codecs.open(\'bb.xml\', \'wb\', \'utf-8\')\n                    f.write(test_data)\n                    f.close()\n    return dict(list_status =report,plan_name = plan)\n\ndef _dict2db(name,time,report):\n    db.report.update_or_insert(plan_name=name,begin_time=time)\n    raw = db((db.report.plan_name==name)&(db.report.begin_time==time)).select().first()\n    if None == raw:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))\n    for d,status in report.items():\n        raw.update_record(device = d,sw = status["sw"],mtbf = status[\'runtime\'])\n        for name in sorted(status[\'status\'].keys()):\n            db.report_status.update_or_insert(report_id = raw.id,case = name.split("_")[-1],passrate = status[\'status\'][name]["passrate"] ,looptime = status[\'status\'][name]["avgtime"])\n\ndef show_report():\n    list_device = []\n    report = {}\n    from testdata import TestData,time_2_second,second_2_time\n    for id in request.args:\n        plan = db.test_plan[id]\n        #1. access db file report\n        data = dbfile.get_report(plan.plan_name,plan.begin_time)\n        print data\n        #2. RPC file report\n        for device_id in plan.test_devices:\n            devices = db(db.device.id==device_id).select().first()\n            if None == devices:\n\n                raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage|<a href=\\"%s\\">Edit Test Plan</h1>"%(URL("index"),(URL("index"))))\n            # devices =  db.client(id)\n            url = devices.host_name.url\n            try:\n                for device,test_data in db_rpc.show_report_by_device(url,devices.name).items():\n                    report[devices.name] = {}\n                    total_runtime = 0\n                    cases = TestData(test_data).parse_data()\n                    for case,value in cases.items():\n                        total_runtime += time_2_second(value["runtime"])\n                    report[device]["status"]=cases\n                    report[device]["runtime"]= second_2_time(total_runtime)\n                    report[device]["sw"] = devices.build_date\n                    dbfile.store_report(plan.plan_name,plan.begin_time,device,test_data)\n            except:\n                continue\n    return dict(list_status =report,plan = plan)\n\ndef show_all_report():\n    all_report = {}\n    from testdata import TestData,time_2_second,second_2_time\n    import codecs\n    for row in db().select(db.test_plan.ALL):\n        report = {}\n        for device_id in row.test_devices:\n            devices = db(db.device.id==device_id).select().first()\n            # devices =  db.client(id)\n            url = devices.host_name.url\n            for device,test_data in db_rpc.show_report_by_device(url,devices.name).items():\n                report[devices.name] = {}\n                total_runtime = 0\n                cases = TestData(test_data).parse_data()\n                for case,value in cases.items():\n                    total_runtime += time_2_second(value["runtime"])\n                report[device]["status"]=cases\n                report[device]["runtime"]= second_2_time(total_runtime)\n                report[device]["sw"] = devices.build_date\n                dbfile.store_report(row.plan_name,row.begin_time,test_data)\n        all_report[row.plan_name] = report\n    if report == {}:\n        raise HTTP(400, "<h1>No test plan exist!<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("index")))\n    return dict(all_report =all_report)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(start_plan)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\project\\web\\web2py\\gluon\\restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py", line 416, in <module>\n  File "D:\\project\\web\\web2py\\gluon\\globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py", line 186, in start_plan\n    devices.append(db.device[id].name)\nAttributeError: \'NoneType\' object has no attribute \'name\'\n'
p11
s.