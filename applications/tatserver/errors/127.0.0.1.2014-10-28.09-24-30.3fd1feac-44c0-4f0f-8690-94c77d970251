(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'M812C_8bf5f7f'"
p3
sS'layer'
p4
S'D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef new_client():\n    form = SQLFORM(db.client)\n    if form.accepts(request.post_vars,session):\n        session.flash = \'client created ok\'\n        redirect(URL(\'show_clients\'))\n    Message ="New Client"\n    return dict(form=form,message=Message)\n\ndef delete_client():\n    """delete an existing client"""\n    row = db.client[request.args(0)]\n    form = SQLFORM(db.client, row, deletable=True,showid=False)\n    if form.process().accepted:\n        response.flash = \'record delete\'\n        redirect(URL(\'show_clients\'))\n    return dict(form=form)\n\ndef edit_client():\n     """edit an existing client"""\n     this_page = db.client(request.args(0,cast=int)) or redirect(URL(\'index\'))\n     form = SQLFORM(db.client, this_page, deletable=True,showid=False).process(\n         next = URL(\'show_clients\',args=request.args))\n     return dict(form=form)\n\ndef show_clients():\n    list_client = db(db.client).select()\n    return dict(list_client =list_client)\n\ndef show_client():\n    client = db.client(request.args(0,cast=int)) or redirect(URL(\'index\'))\n    return dict(client =client)\n\ndef show_client_status():\n    plans = []\n    testStatus = {"client_name":"lz","testor_name":"lz","status":"running","plan_list":["111","222222"]}\n    list_client = db(db.client).select()\n    for client in list_client:\n        #RPC Function\n        if testStatus["client_name"]==client.name:\n            # myquery = (db.test_client.client_name == testStatus["client_name"])\n            # myset = db(myquery)\n            # if None != myset:\n            #     myset.update(status=testStatus["status"])\n            #     myset.delete()\n            # else:\n            #     pass\n            plans.append(testStatus["plan_list"])\n            db.test_client.update_or_insert(client_name="lz",testor_name="l1z",status="running",plan_list="111,222222")\n    return dict(form = SQLFORM(db.test_client), list_client = db(db.test_client).select())\n\n\n\ndef new_device():\n    form = SQLFORM(db.device)\n    if form.accepts(request.post_vars,session):\n        session.flash = \'client created ok\'\n        redirect(URL(\'show_clients\'))\n    Message ="New Client"\n    return dict(form=form,message=Message)\n\ndef edit_device():\n    """delete an existing client"""\n    row = db.device[request.args(0,cast=int)]\n    form = SQLFORM(db.device, row, deletable=True,showid=False,readonly=False)\n    if form.process().accepted:\n        response.flash = \'record delete\'\n        redirect(URL(\'show_all_devices\'))\n    return dict(form=form)\n\ndef flush_all_devices():\n    list_client = db(db.client).select()\n    devices = {}\n    for client in list_client:\n        try:\n            for device,detail in db_rpc.show_device(client.url).items():\n                device_id = device+"_"+detail["product"]\n                # raw = db(db.device.name==device_id).select().first()\n                # if None != raw:\n                #     pass\n                db.device.update_or_insert(name = device_id,display_id = detail["display_id"],\n                                           build_date = detail["build_date"],product = detail["product"],\n                                           region = detail["region"],hardware = detail["hardware"],\n                                           build_type = detail["build_type"],host_name = client.id)\n        except:\n            continue\n    redirect(URL(\'show_all_devices\'))\n    Message ="Flush all devices Success!"\n    return dict(message=Message)\n\ndef show_all_devices():\n    list_devices = db(db.device).select()\n    return dict(list_device =list_devices)\n\ndef show_device_status():\n    list_devices = db(db.device_status).select()\n    return dict(list_devices =list_devices)\n\ndef show_device():\n    list_device = db(db.device.host_name==request.args[0]).select()\n    if None == list_device:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("index")))\n    return dict(list_device = list_device)\n\ndef device_cfg():\n    return dict(device = db.device[request.args(0,cast=int)])\n\n\ndef del_device():\n\n    return dict()\n\n\n\ndef new_plan():\n    # a = ["b","aaa","ccc"]\n    #\n    # pj_dict = {"Alto5":{"v3H20":{"ZZ":"x3h2zz00bg00","ZZ":"x3h21230bg00"}},"Alto4":{"vasdH20":{"ZZ":"x3h2zz00bg00","ZZ":"x3h21230bg00"}}}\n    #\n    #\n    # project_form = FORM(TABLE(\n    #     TR(\'project:\', INPUT(_type=\'text\', _name=\'name\',requires=IS_NOT_EMPTY())),\n    #     TR(\'Your email:\', INPUT(_type=\'text\', _name=\'email\',requires=IS_EMAIL())),\n    #     TR(\'Admin\', INPUT(_type=\'checkbox\', _name=\'admin\')),\n    #     TR(\'persos\', SELECT(a, _name=\'sure\',\n    #                         onChange="getpersom(this.value)",align=\'top\',requires=IS_IN_SET([\'yes\', \'no\']))),\n    #     TR(\'persos_m\', SELECT(a, _name=\'persos_m\',hidden=True)),\n    # ))\n    # plan_form = FORM(TABLE(\n    #     TR(\'project:\', INPUT(_type=\'text\', _name=\'name\',requires=IS_NOT_EMPTY())),\n    #     TR(\'Test Type:\', INPUT(_type=\'text\', _name=\'test_type\',requires=IS_NOT_EMPTY())),\n    #     TR(\'TestScript Branch:\', INPUT(_type=\'text\', _name=\'scrip_branch\',requires=IS_NOT_EMPTY())),\n    #     TR(\'TestScript Tag:\', INPUT(_type=\'text\', _name=\'scrip_tag\',requires=IS_NOT_EMPTY())),\n    #     TR(\'tool:\', INPUT(_type=\'text\', _name=\'tool\',requires=IS_EMAIL())),\n    #     TR(\'begin time\', INPUT(__type=\'date\', _name=\'begin_time\',requires=IS_TIME())),\n    #     TR(\'client_name\', SELECT(a, _name=\'sure\',\n    #                         onChange="getpersom(this.value)",align=\'top\',requires=IS_IN_SET([\'yes\', \'no\']))),\n    #     TR(\'\', INPUT(_type=\'submit\', _value=\'SUBMIT\')),\n    # ))\n    # db.tool.update_or_insert(tool_version = 1.0)\n    # plan_form1 = SQLFORM(db.test_plan)\n    # if plan_form1.process().accepted:\n    #     response.flash = \'record inserted\'\n    # return dict(project_form = project_form,plan_form = plan_form1,pj_dict = pj_dict)\n    db.tool.update_or_insert(tool_version = 1.0)\n    plan_form = SQLFORM(db.test_plan,fields=[\'plan_name\', \'TestScript_Branch\',\'Tool\', \'test_devices\',"begin_time"])\n    if plan_form.process().accepted:\n        dbfile.gen_plan(db.test_plan(plan_name = request.vars.plan_name))\n        for d in plan_form.vars.test_devices:\n            device = db(db.device.id==d).select().first()\n            url = device.host_name.url\n        response.flash = \'record inserted\'\n        redirect(URL(\'show_plan\'))\n    return dict(plan_form = plan_form)\n\nimport time\ndef start_plan():\n    """delete an existing client"""\n    devices = []\n    row = db.test_plan[request.args(0,cast=int)]\n    if None == row:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))\n    print row.test_devices\n    for id in row.test_devices:\n        if None!=db.device[id]:\n            devices.append(db.device[id].name)\n    row.update_record(status = "Running",display_devices = devices,begin_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))\n    message = "Test Plan Start"\n    redirect(URL(\'show_plan\'))\n    return dict(message=message)\n\ndef stop_plan():\n    """delete an existing client"""\n    row = db.test_plan[request.args(0,cast=int)]\n    if None == row:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))\n    if row.status != "Running":\n        message = "Test Plan IsStoped"\n        redirect(URL(\'show_plan\'))\n    row.update_record(status = "Stop")\n    message = "Test Plan Stop"\n    redirect(URL(\'show_plan\'))\n    return dict(message=message)\n\ndef finish_plan():\n    """delete an existing client"""\n    row = db.test_plan[request.args(0,cast=int)]\n    if None == row:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))\n    if row.status != "Running":\n        message = "Test Plan IsFinished"\n        redirect(URL(\'show_plan\'))\n    row.update_record(status = "AdminFinished")\n    message = "Test Plan Stop"\n    redirect(URL(\'show_plan\'))\n    return dict(message=message)\n\ndef edit_plan():\n    """delete an existing client"""\n    devices = []\n    row = db.test_plan[request.args(0,cast=int)]\n    form = SQLFORM(db.test_plan, row, deletable=True,showid=False,readonly=False,fields=[\'plan_name\', \'TestScript_Branch\',\'Tool\', \'test_devices\',"begin_time"])\n    if form.process().accepted:\n        for id in row.test_devices:\n            if None!=db.device[id]:\n                devices.append(db.device[id].name)\n        row.update_record(display_devices = devices)\n        response.flash = \'record delete\'\n        redirect(URL(\'show_plan\'))\n    return dict(form=form)\n\ndef get_report():\n    return "success"\n\ndef display():\n    form = SQLFORM(db.test_plan)\n    return dict(form = form)\n\ndef show_plan():\n    return dict(list_plan= db(db.test_plan).select())\n\ndef show_all_plan():\n    return dict(list_plan= db(db.test_plan).select())\n\ndef show_all_report():\n    from applications.TATServer.modules.testdata import xml2dict\n    report = {}\n    list_client = db(db.client).select()\n    for client in list_client:\n        report[client.name] = {}\n        try:\n            for device,test_data in db_rpc.show_all_report(client.url).items():\n                report[client.name].update({device:xml2dict(test_data)})\n        except:\n            continue\n    return dict(list_client =list_client ,report = report)\n\ndef show_report_bak():\n    list_device = []\n    report = {}\n    data = []\n    from testdata import TestData,time_2_second,second_2_time\n    import codecs\n    for id in request.args:\n        plan = db.test_plan[id]\n        for device_id in plan.test_devices:\n            devices = db.device[device_id]\n                # db(db.device.id==device_id).select().first()\n            list_device.append(devices)\n    def _get_report(list_device):\n        url = list_device[0].host_name.url\n        for device,test_data in db_rpc.show_all_report(url).items():\n            report[device] = {}\n            total_runtime = 0\n            cases = TestData(test_data).parse_data()\n            for case,value in cases.items():\n                total_runtime += time_2_second(value["runtime"])\n            report[device]["status"]=cases\n            report[device]["runtime"]= second_2_time(total_runtime)\n            report[device]["sw"] = db(db.device.name==device).select().first().build_date\n        list_device = filter(lambda x:list_device[0].host_name!=x.host_name, list_device)\n        if list_device!=[]:\n            _get_report(list_device)\n    _get_report(list_device)\n    return dict(list_status =report,plan_name = plan)\n\ndef _dict2db(name,time,report):\n    db.report.update_or_insert(plan_name=name,begin_time=time)\n    raw = db((db.report.plan_name==name)&(db.report.begin_time==time)).select().first()\n    if None == raw:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))\n    for d,status in report.items():\n        raw.update_record(device = d,sw = status["sw"],mtbf = status[\'runtime\'])\n        for name in sorted(status[\'status\'].keys()):\n            db.report_status.update_or_insert(report_id = raw.id,case = name.split("_")[-1],passrate = status[\'status\'][name]["passrate"] ,looptime = status[\'status\'][name]["avgtime"])\n\ndef testdata_parse(device,testdata):\n    from testdata import TestData,time_2_second,second_2_time\n    report = {}\n    try:\n        report[device] = {}\n        total_runtime = 0\n        cases = TestData(testdata).parse_data()\n        for case,value in cases.items():\n            total_runtime += time_2_second(value["runtime"])\n        report[device]["status"]=cases\n        report[device]["runtime"]= second_2_time(total_runtime)\n        report[device]["sw"] = "NA"\n    except:\n        pass\n    return report\n\n\ndef get_report_by_plan(plan):\n    report = {}\n    from testdata import TestData, time_2_second, second_2_time\n\n    # 1. access db file report\n    if plan.status == "AdminFinished":\n        db_report = db(\n            (db.report.name == plan.plan_name) & (db.report.begin_time == plan.begin_time)).select().first()\n        if None != db_report:\n            report.update(eval(db_report.report))\n            return report\n    data = dbfile.get_report(plan.plan_name, plan.begin_time)\n    #2. RPC file report\n    # for device_id in plan.test_devices:\n    #     devices = db(db.device.id==device_id).select().first()\n\n    if None!=plan.display_devices:\n        for device_name in plan.display_devices:\n            devices = db(db.device.name == device_name).select().first()\n            if None == devices:\n                #2 access db file\n                if data != {}:\n                    if data.has_key(device_name):\n                        report.update(testdata_parse(device_name, data[device_name]))\n                        continue\n                    else:\n                        continue\n            else:\n                # raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage|<a href=\\"%s\\">Edit Test Plan</h1>"%(URL("index"),(URL("index"))))\n                # devices =  db.client(id)\n                url = devices.host_name.url\n                # try:\n                # for device, test_data in db_rpc.show_report_by_device(url, devices.name).items():\n                for device, test_data in db_rpc.show_all_report(url).items():\n                    print device\n                    report[devices.name] = {}\n                    total_runtime = 0\n                    cases = TestData(test_data).parse_data()\n                    for case, value in cases.items():\n                        total_runtime += time_2_second(value["runtime"])\n                    report[device]["status"] = cases\n                    report[device]["runtime"] = second_2_time(total_runtime)\n                    report[device]["sw"] = devices.build_date\n                    dbfile.store_report(plan.plan_name, plan.begin_time, device, test_data)\n                # except:\n                #     continue\n    # save to db report\n    db_report = db((db.report.name == plan.plan_name) & (db.report.begin_time == plan.begin_time)).select().first()\n    if None != db_report:\n        db_report.update_record()\n    else:\n        db.report.update_or_insert(name=plan.plan_name, begin_time=plan.begin_time, report=report)\n    return report\n\n\ndef show_report():\n    plan = db.test_plan[request.args(0,cast=int)]\n    if plan == None:\n        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))\n    report = get_report_by_plan(plan)\n    print report\n    return dict(list_status =report,plan = plan)\n\ndef show_all_report():\n    all_report = {}\n    from testdata import TestData,time_2_second,second_2_time\n    import codecs\n    for row in db().select(db.test_plan.ALL):\n        report = {}\n        for device_id in row.test_devices:\n            devices = db(db.device.id==device_id).select().first()\n            # devices =  db.client(id)\n            url = devices.host_name.url\n            for device,test_data in db_rpc.show_report_by_device(url,devices.name).items():\n                report[devices.name] = {}\n                total_runtime = 0\n                cases = TestData(test_data).parse_data()\n                for case,value in cases.items():\n                    total_runtime += time_2_second(value["runtime"])\n                report[device]["status"]=cases\n                report[device]["runtime"]= second_2_time(total_runtime)\n                report[device]["sw"] = devices.build_date\n                dbfile.store_report(row.plan_name,row.begin_time,test_data)\n        all_report[row.plan_name] = report\n    if report == {}:\n        raise HTTP(400, "<h1>No test plan exist!<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("index")))\n    return dict(all_report =all_report)\n\ndef show_current_report():\n    all_report = {}\n    for row in db().select(db.test_plan.ALL):\n        all_report[row.plan_name] = get_report_by_plan(row)\n    return dict(all_report =all_report)\n\ndef show_history_report():\n    all_report = {}\n    from testdata import TestData,time_2_second,second_2_time\n    import codecs\n    for row in db().select(db.test_plan.ALL):\n        report = {}\n        for device_id in row.test_devices:\n            devices = db(db.device.id==device_id).select().first()\n            # devices =  db.client(id)\n            url = devices.host_name.url\n            for device,test_data in db_rpc.show_report_by_device(url,devices.name).items():\n                report[devices.name] = {}\n                total_runtime = 0\n                cases = TestData(test_data).parse_data()\n                for case,value in cases.items():\n                    total_runtime += time_2_second(value["runtime"])\n                report[device]["status"]=cases\n                report[device]["runtime"]= second_2_time(total_runtime)\n                report[device]["sw"] = devices.build_date\n                dbfile.store_report(row.plan_name,row.begin_time,test_data)\n        all_report[row.plan_name] = report\n    if report == {}:\n        raise HTTP(400, "<h1>No test plan exist!<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("index")))\n    return dict(all_report =all_report)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(show_report)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.KeyError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.KeyError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.KeyError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.KeyError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.KeyError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.KeyError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.KeyError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.KeyError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.KeyError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.KeyError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.KeyError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.KeyError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.KeyError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.KeyError object>"
p41
sS'args'
p42
S"('M812C_8bf5f7f',)"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.KeyError object>'
p47
sS'__doc__'
p48
S"'Mapping key not found.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.KeyError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"'M812C_8bf5f7f'"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\x9eX\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>tatserver</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-fef80e29-14e3-41a2-a1d4-1868a9928bb3<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_tatserver</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-950d9bd1-2cef-471c-901e-94ea92f7bcd7<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate,sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>zh-CN,zh;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CACHE_CONTROL</td><td style="vertical-align:top;">:</td><td><div>max-age=0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_tatserver=127.0.0.1-950d9bd1-2cef-471c-901e-94ea92f7bcd7; session_id_admin=127.0.0.1-fef80e29-14e3-41a2-a1d4-1868a9928bb3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/tatserver/default/show_plan</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36 SE 2.X MetaSr 1.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/tatserver/default/show_report/1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>8938</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>50419-0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;D:\\\\project\\\\web\\\\web2py\\\\applications\\\\welcome\\\\&#x27;, &#x27;D:\\\\project\\\\web\\\\web2py\\\\applications\\\\tatserver\\\\&#x27;, &#x27;D:\\\\project\\\\web\\\\web2py\\\\applications\\\\admin\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>D:\\project\\web\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x297fd28: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;fe80::c552:3240:c7e2:7bbe%13&#x27;, &#x27;172.16.44.222&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;scheduler_groups&#x27;: None, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;50419-0&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;D:\\\\project\\\\web\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>D:\\project\\web\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate,sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>zh-CN,zh;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cache_control</td><td style="vertical-align:top;">:</td><td><div>max-age=0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_tatserver=127.0.0.1-950d9bd1-2cef-471c-901e-94ea92f7bcd7; session_id_admin=127.0.0.1-fef80e29-14e3-41a2-a1d4-1868a9928bb3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_referer</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/tatserver/default/show_plan</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36 SE 2.X MetaSr 1.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>50419-0.sagemwireless</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>50419-0</div></td></tr><tr><td><div>fe80::c552:3240:c7e2:7bbe%13</div></td></tr><tr><td><div>172.16.44.222</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/tatserver/default/show_report/1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>8938</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/tatserver/default/show_report/1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>50419-0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>D:\\project\\web\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.9.11-stable+timestamp.2014.09.15.23.35.11</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x0154D0D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x029323E8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x0C1FC9B0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x0154D0D0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x029323E8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x0C1FC9B0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>D:\\project\\web\\web2py\\applications\\tatserver\\</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>show_report</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;D:\\\\project\\\\web\\\\web2py\\\\applications\\\\welcome\\\\&#x27;, &#x27;D:\\\\project\\\\web\\\\web2py\\\\applications\\\\tatserver\\\\&#x27;, &#x27;D:\\\\project\\\\web\\\\web2py\\\\applications\\\\admin\\\\&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>D:\\project\\web\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x297fd28: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;fe80::c552:3240:c7e2:7bbe%13&#x27;, &#x27;172.16.44.222&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;scheduler_groups&#x27;: None, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;50419-0&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;D:\\\\project\\\\web\\\\web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>D:\\project\\web\\web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>50419-0.sagemwireless</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>50419-0</div></td></tr><tr><td><div>fe80::c552:3240:c7e2:7bbe%13</div></td></tr><tr><td><div>172.16.44.222</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.9.11-stable+timestamp.2014.09.15.23.35.11</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_sheduler</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2014, 10, 28, 9, 24, 30, 964000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/tatserver/default/show_report/1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2014, 10, 28, 1, 24, 30, 964000)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uuid</td><td style="vertical-align:top;">:</td><td><div>tatserver/127.0.0.1.2014-10-28.09-24-30.3fd1feac-44c0-4f0f-8690-94c77d970251</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x0D291770&gt;</div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'D:\\project\\web\\web2py\\gluon\\restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 0CCCF920, file "D:\\proj...tions\\tatserver\\controllers/default.py", line 12>'
p69
ssS'lnum'
p70
I224
sS'lines'
p71
(dp72
I224
S'        exec ccode in environment'
p73
sI225
S'    except HTTP:'
p74
sI226
S'        raise'
p75
sI227
S'    except RestrictedError:'
p76
sI228
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p77
sI219
S'    try:'
p78
sI220
S'        if isinstance(code, types.CodeType):'
p79
sI221
S'            ccode = code'
p80
sI222
S'        else:'
p81
sI223
S'            ccode = compile2(code, layer)'
p82
ssS'call'
p83
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...s)\\n\\nresponse._vars=response._caller(show_report)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, ...}, layer=r'D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py')"
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'D:\\project\\web\\web2py\\applications\\tatserver\\controllers\\default.py'
p88
sg64
(dp89
sg70
I484
sg71
(dp90
I480
S"        '<tablename>': {'GET':{},'POST':{},'PUT':{},'DELETE':{}},"
p91
sI481
S'        }'
p92
sI482
S'    return Collection(db).process(request,response,rules)'
p93
sI473
S'def api():'
p94
sI474
S'    """'
p95
sI475
S'    this is example of API with access control'
p96
sI476
S'    WEB2PY provides Hypermedia API (Collection+JSON) Experimental'
p97
sI477
S'    """'
p98
sI478
S'    from gluon.contrib.hypermedia import Collection'
p99
sI479
S'    rules = {'
p100
ssg83
S'()'
p101
sg85
S'<module>'
p102
sa(dp103
g62
S'D:\\project\\web\\web2py\\gluon\\globals.py'
p104
sg64
(dp105
S'self'
p106
S'undefined'
p107
sS'f'
S'<function show_report>'
p108
ssg70
I392
sg71
(dp109
I387
S"        self.flash = ''            # used by the default view layout"
p110
sI388
S'        self.meta = Storage()      # used by web2py_ajax.html'
p111
sI389
S'        self.menu = []             # used by the default view layout'
p112
sI390
S'        self.files = []            # used by web2py_ajax.html'
p113
sI391
S'        self._vars = None'
p114
sI392
S'        self._caller = lambda f: f()'
p115
sI393
S'        self._view_environment = None'
p116
sI394
S'        self._custom_commit = None'
p117
sI395
S'        self._custom_rollback = None'
p118
sI396
S"        self.generic_patterns = ['*']"
p119
ssg83
S'(f=<function show_report>)'
p120
sg85
S'<lambda>'
p121
sa(dp122
g62
S'D:\\project\\web\\web2py\\applications\\tatserver\\controllers\\default.py'
p123
sg64
(dp124
S'report'
p125
g107
sS'global get_report_by_plan'
p126
S'<function get_report_by_plan>'
p127
sS'plan'
p128
S"<Row {'test_devices': [2L], 'status': 'Running',...ame': 'ttt', 'id': 1L, 'test_operation': 'INIT'}>"
p129
ssg70
I375
sg71
(dp130
I370
S''
sI371
S'def show_report():'
p131
sI372
S'    plan = db.test_plan[request.args(0,cast=int)]'
p132
sI373
S'    if plan == None:'
p133
sI374
S'        raise HTTP(400, "<h1>Record not finded,may deleted by others.<a href=\\"%s\\"><br/>Go back homepage</h1>"%(URL("show_plan")))'
p134
sI375
S'    report = get_report_by_plan(plan)'
p135
sI376
S'    print report'
p136
sI377
S'    return dict(list_status =report,plan = plan)'
p137
sI378
S''
sI379
S'def show_all_report():'
p138
ssg83
S'()'
p139
sg85
S'show_report'
p140
sa(dp141
g62
S'D:\\project\\web\\web2py\\applications\\tatserver\\controllers\\default.py'
p142
sg64
(dp143
S'report'
p144
S"{'8bf5f7f_M812C': {}}"
p145
sS'device'
p146
S"'M812C_8bf5f7f'"
p147
sS'cases'
p148
S"{'Browser': {'avgtime': '0:55:13', 'passrate': '99.77%', 'runtime': '7:21:49'}, 'Download': {'avgtime': '0:34:15', 'passrate': '95.50%', 'runtime': '4:34:2'}, 'Email': {'avgtime': '2:12:38', 'passrate': '98.42%', 'runtime': '17:41:7'}, 'Messaging': {'avgtime': '2:59:6', 'passrate': '76.12%', 'runtime': '23:52:53'}, 'Multi Tasking': {'avgtime': '0:32:24', 'passrate': '43.87%', 'runtime': '4:19:12'}, 'Multi-Media': {'avgtime': '0:41:10', 'passrate': '99.66%', 'runtime': '5:29:23'}, 'PIM': {'avgtime': '0:3:32', 'passrate': '100.00%', 'runtime': '0:28:20'}, 'Telephony': {'avgtime': '1:14:16', 'passrate': '82.24%', 'runtime': '9:54:12'}, 'Wifi': {'avgtime': '0:26:6', 'passrate': '63.93%', 'runtime': '3:2:43'}}"
p149
ssg70
I356
sg71
(dp150
I352
S'                    total_runtime = 0'
p151
sI353
S'                    cases = TestData(test_data).parse_data()'
p152
sI354
S'                    for case, value in cases.items():'
p153
sI355
S'                        total_runtime += time_2_second(value["runtime"])'
p154
sI356
S'                    report[device]["status"] = cases'
p155
sI357
S'                    report[device]["runtime"] = second_2_time(total_runtime)'
p156
sI358
S'                    report[device]["sw"] = devices.build_date'
p157
sI359
S'                    dbfile.store_report(plan.plan_name, plan.begin_time, device, test_data)'
p158
sI360
S'                # except:'
p159
sI351
S'                    report[devices.name] = {}'
p160
ssg83
S"(plan=<Row {'test_devices': [2L], 'status': 'Running',...ame': 'ttt', 'id': 1L, 'test_operation': 'INIT'}>)"
p161
sg85
S'get_report_by_plan'
p162
sasS'pyver'
p163
S'Python 2.7.8: C:\\Python27\\python.exe (prefix: C:\\Python27)'
p164
sS'session'
p165
g57
(S's7\x01\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">last_orderby</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_query</td><td style="vertical-align:top;">:</td><td><div>db.report.id&gt;0</div></td></tr></table></div>'
tRp166
sS'etype'
p167
S"<type 'exceptions.KeyError'>"
p168
sS'date'
p169
S'Tue Oct 28 09:24:31 2014'
p170
sS'response'
p171
g57
(S's\x8d\x1a\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x0CAC19C0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_tatserver</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-950d9bd1-2cef-471c-901e-94ea92f7bcd7<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div>: </div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>table3cols</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/tatserver/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Plan</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/tatserver/default/show_plan</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Devices</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/tatserver/default/show_all_devices</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/show_report/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_tatserver</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;D:\\\\project\\\\web\\\\web2py\\\\applications\\\\tatserver\\\\sessions\\\\1fb\\\\07e\\\\127.0.0.1-950d9bd1-2cef-471c-901e-94ea92f7bcd7&#x27;, mode &#x27;rb+&#x27; at 0x0D282C80&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>D:\\project\\web\\web2py\\applications\\tatserver\\sessions\\127.0.0.1-950d9bd1-2cef-471c-901e-94ea92f7bcd7</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>41160dc5cc127e41a1329198c5865076</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-950d9bd1-2cef-471c-901e-94ea92f7bcd7</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_tatserver</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>tatserver</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>default/show_report.html</div></td></tr></table></div>'
tRp172
sS'locals'
p173
(dp174
S'case'
p175
S"'Browser'"
p176
sS'url'
p177
S"'http://172.16.44.222:8080'"
p178
sS'data'
p179
g45
sS'time_2_second'
p180
S'<function time_2_second>'
p181
sS'value'
p182
S"{'avgtime': '0:55:13', 'passrate': '99.77%', 'runtime': '7:21:49'}"
p183
sS'device_name'
p184
S"'8bf5f7f_M812C'"
p185
sS'device'
p186
S"'M812C_8bf5f7f'"
p187
sS'test_data'
p188
S'u\'\\ufeff<?xml version="1.0" encoding="utf-8"?>\\n...    </DATA>\\n    </Case>\\n  </CASES>\\n</RESULTS>\''
p189
sS'second_2_time'
p190
S'<function second_2_time>'
p191
sS'devices'
p192
S"<Row {'display_id': 'KVT49L', 'build_date': 'Thu...: 'qcom', 'host_name': 2L, 'build_type': 'user'}>"
p193
sS'total_runtime'
p194
S'276221'
p195
sS'report'
p196
S"{'8bf5f7f_M812C': {}}"
p197
sS'cases'
p198
S"{'Browser': {'avgtime': '0:55:13', 'passrate': '99.77%', 'runtime': '7:21:49'}, 'Download': {'avgtime': '0:34:15', 'passrate': '95.50%', 'runtime': '4:34:2'}, 'Email': {'avgtime': '2:12:38', 'passrate': '98.42%', 'runtime': '17:41:7'}, 'Messaging': {'avgtime': '2:59:6', 'passrate': '76.12%', 'runtime': '23:52:53'}, 'Multi Tasking': {'avgtime': '0:32:24', 'passrate': '43.87%', 'runtime': '4:19:12'}, 'Multi-Media': {'avgtime': '0:41:10', 'passrate': '99.66%', 'runtime': '5:29:23'}, 'PIM': {'avgtime': '0:3:32', 'passrate': '100.00%', 'runtime': '0:28:20'}, 'Telephony': {'avgtime': '1:14:16', 'passrate': '82.24%', 'runtime': '9:54:12'}, 'Wifi': {'avgtime': '0:26:6', 'passrate': '63.93%', 'runtime': '3:2:43'}}"
p199
sS'TestData'
p200
S"<class 'applications.tatserver.modules.testdata.TestData'>"
p201
sS'plan'
p202
S"<Row {'test_devices': [2L], 'status': 'Running',...ame': 'ttt', 'id': 1L, 'test_operation': 'INIT'}>"
p203
sssS'traceback'
p204
S'Traceback (most recent call last):\n  File "D:\\project\\web\\web2py\\gluon\\restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py", line 484, in <module>\n  File "D:\\project\\web\\web2py\\gluon\\globals.py", line 392, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py", line 375, in show_report\n    report = get_report_by_plan(plan)\n  File "D:\\project\\web\\web2py\\applications\\tatserver\\controllers/default.py", line 356, in get_report_by_plan\n    report[device]["status"] = cases\nKeyError: \'M812C_8bf5f7f\'\n'
p205
s.